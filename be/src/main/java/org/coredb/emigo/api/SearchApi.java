/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.emigo.api;

import org.coredb.emigo.model.Contact;
import org.coredb.emigo.model.SearchArea;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "search", description = "the search API")
public interface SearchApi {

    @ApiOperation(value = "", nickname = "scanAccounts", notes = "Search accounts according to location", response = Contact.class, responseContainer = "List", tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search executed", response = Contact.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "invalid login token"),
        @ApiResponse(code = 423, message = "account not enabled"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/search/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<List<Contact>> scanAccounts(@ApiParam(value = "emigo to insert" ,required=true )  @Valid @RequestBody SearchArea body,@NotNull @ApiParam(value = "login token", required = true) @Valid @RequestParam(value = "token", required = true) String token,@NotNull  @DecimalMax("1024") @ApiParam(value = "return max number of results", required = true) @Valid @RequestParam(value = "limit", required = true) Integer limit,@ApiParam(value = "return results starting at offset") @Valid @RequestParam(value = "offset", required = false) Integer offset);


    @ApiOperation(value = "", nickname = "searchAccounts", notes = "Search accounts according to criteria", response = Contact.class, responseContainer = "List", tags={ "search", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search executed", response = Contact.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "invalid login token"),
        @ApiResponse(code = 423, message = "account not enabled"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/search/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Contact>> searchAccounts(@NotNull @ApiParam(value = "login token", required = true) @Valid @RequestParam(value = "token", required = true) String token,@NotNull  @DecimalMax("1024") @ApiParam(value = "return max number of results", required = true) @Valid @RequestParam(value = "limit", required = true) Integer limit,@ApiParam(value = "or-set of matching name, handle, location, description") @Valid @RequestParam(value = "match", required = false) String match,@ApiParam(value = "filter with name like") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "filter with handle like") @Valid @RequestParam(value = "handle", required = false) String handle,@ApiParam(value = "filter with description like") @Valid @RequestParam(value = "description", required = false) String description,@ApiParam(value = "filter with location like") @Valid @RequestParam(value = "location", required = false) String location,@ApiParam(value = "return results starting at offset") @Valid @RequestParam(value = "offset", required = false) Integer offset);

}
