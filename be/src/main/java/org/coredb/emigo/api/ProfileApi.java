/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.11).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.coredb.emigo.api;

import org.coredb.emigo.model.GpsLocation;
import org.coredb.emigo.model.Profile;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@Api(value = "profile", description = "the profile API")
public interface ProfileApi {

    @ApiOperation(value = "", nickname = "availableProfile", notes = "Update available state", response = Profile.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "password updated", response = Profile.class),
        @ApiResponse(code = 401, message = "invalid token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/available",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Profile> availableProfile(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,@NotNull @ApiParam(value = "whether account is searchable", required = true) @Valid @RequestParam(value = "flag", required = true) Boolean flag);


    @ApiOperation(value = "", nickname = "getProfile", notes = "Retrieve current profile values", response = Profile.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "location updated", response = Profile.class),
        @ApiResponse(code = 401, message = "invalid token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/all",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Profile> getProfile(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "", nickname = "getProfileRevision", notes = "request revision of profile", response = Integer.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Integer.class),
        @ApiResponse(code = 403, message = "access denied") })
    @RequestMapping(value = "/profile/revision",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Integer> getProfileRevision(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token);


    @ApiOperation(value = "", nickname = "gpsProfile", notes = "Set gps location of account", response = Profile.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "location updated", response = Profile.class),
        @ApiResponse(code = 401, message = "invalid token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/location",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Profile> gpsProfile(@ApiParam(value = "amigo to insert" ,required=true )  @Valid @RequestBody GpsLocation body,@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,@ApiParam(value = "expiration of location") @Valid @RequestParam(value = "expires", required = false) Long expires);


    @ApiOperation(value = "", nickname = "searchableProfile", notes = "Update searchable state", response = Profile.class, tags={ "profile", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "password updated", response = Profile.class),
        @ApiResponse(code = 401, message = "invalid token"),
        @ApiResponse(code = 423, message = "account locked"),
        @ApiResponse(code = 500, message = "internal server error") })
    @RequestMapping(value = "/profile/searchable",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Profile> searchableProfile(@NotNull @ApiParam(value = "access token", required = true) @Valid @RequestParam(value = "token", required = true) String token,@NotNull @ApiParam(value = "whether account is searchable", required = true) @Valid @RequestParam(value = "flag", required = true) Boolean flag);


}

